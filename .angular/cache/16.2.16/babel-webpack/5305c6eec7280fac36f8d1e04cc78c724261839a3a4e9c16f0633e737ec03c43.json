{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { ToastType } from '../models/toastr.model';\nimport * as i0 from \"@angular/core\";\nexport let ToastrService = /*#__PURE__*/(() => {\n  class ToastrService {\n    static {\n      this.DefaultDuration = 5;\n    }\n    constructor() {\n      this.toastSubject = new Subject();\n    }\n    get toasts() {\n      return this.toastSubject;\n    }\n    handleError(errorResponse) {\n      let statusCode;\n      if (errorResponse.status) {\n        statusCode = errorResponse.status;\n      } else {\n        statusCode = 500;\n      }\n      const serviceUnavailable = this.isServiceUnavailable(errorResponse.status);\n      let content;\n      if (serviceUnavailable) {\n        content = 'errors.service-unavailable';\n      } else if (errorResponse.error && errorResponse.error.errorTranslation) {\n        content = errorResponse.error.errorTranslation;\n      } else if (errorResponse.error && errorResponse.error.errorMessage) {\n        content = errorResponse.error.errorMessage;\n      } else {\n        content = 'errors.default-error';\n      }\n      const toast = {\n        id: Math.random().toString(),\n        duration: ToastrService.DefaultDuration,\n        content: content,\n        params: {\n          value: statusCode\n        },\n        toastType: ToastType.ERROR\n      };\n      this.toastSubject.next(toast);\n    }\n    handleCustomError(key, value) {\n      const toast = {\n        id: Math.random().toString(),\n        duration: ToastrService.DefaultDuration,\n        content: key,\n        params: {\n          value: value\n        },\n        toastType: ToastType.ERROR\n      };\n      this.toastSubject.next(toast);\n    }\n    handleSuccess(key, value) {\n      const toast = {\n        id: Math.random().toString(),\n        duration: ToastrService.DefaultDuration,\n        content: key,\n        params: {\n          value: value\n        },\n        toastType: ToastType.SUCCESS\n      };\n      this.toastSubject.next(toast);\n    }\n    handleToast(toast) {\n      this.toastSubject.next(toast);\n    }\n    isServiceUnavailable(errorStatus) {\n      return errorStatus.toString().startsWith('5');\n    }\n    static {\n      this.ɵfac = function ToastrService_Factory(t) {\n        return new (t || ToastrService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ToastrService,\n        factory: ToastrService.ɵfac\n      });\n    }\n  }\n  return ToastrService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}